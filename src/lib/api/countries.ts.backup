'use server';

import { API_CONFIG, API_ENDPOINTS } from '@/lib/config';
import { RestCountriesResponse, Country, WorldBankResponse } from '@/types/country.types';

// Economic data interface for World Bank data
export interface EconomicData {
  gdp?: number;
  gdpPerCapita?: number;
  gdpGrowth?: number;
  unemployment?: number;
  inflation?: number;
  year?: number;
}

// Transform REST Countries API response to our internal Country type
function transformRestCountryToCountry(apiCountry: any): Country {
  // Handle different API versions
  // v2 format has different structure than v3.1
  const isV3 = apiCountry.name?.common !== undefined;
  
  // Handle names with robust fallbacks
  const name = isV3 ? (apiCountry.name?.common || 'Unknown Country') : (apiCountry.name || 'Unknown Country');
  const officialName = isV3 ? (apiCountry.name?.official || name) : (apiCountry.nativeName || apiCountry.name || name);
  
  // Handle country code with robust fallbacks
  let countryCode = '';
  if (isV3) {
    countryCode = apiCountry.cca2 || apiCountry.cca3 || '';
  } else {
    countryCode = apiCountry.alpha2Code || apiCountry.alpha3Code || '';
  }
  
  // If no code available, generate one from name as last resort
  if (!countryCode && name !== 'Unknown Country') {
    // Create a more unique code by using first letter + first consonant + length
    const cleanName = name.replace(/[^a-zA-Z]/g, '').toUpperCase();
    if (cleanName.length >= 2) {
      const firstLetter = cleanName[0];
      // Find first consonant after first letter
      const consonants = cleanName.slice(1).match(/[BCDFGHJKLMNPQRSTVWXYZ]/);
      const secondChar = consonants ? consonants[0] : cleanName[1] || 'X';
      countryCode = firstLetter + secondChar;
    } else {
      countryCode = cleanName.padEnd(2, 'X');
    }
  }
  
  // Handle languages - convert to array with robust error handling
  let languages: string[] = [];
  try {
    if (isV3) {
      languages = apiCountry.languages 
        ? Object.values(apiCountry.languages).filter(Boolean)
        : [];
    } else {
      // v2 format
      languages = apiCountry.languages
        ? apiCountry.languages.map((lang: any) => lang?.name || lang).filter(Boolean)
        : [];
    }
  } catch (error) {
    console.warn('Failed to parse languages for', name, error);
    languages = [];
  }

  // Handle currencies - convert to array of names with robust error handling
  let currencies: string[] = [];
  try {
    if (isV3) {
      currencies = apiCountry.currencies
        ? Object.values(apiCountry.currencies).map((currency: any) => currency?.name).filter(Boolean)
        : [];
    } else {
      // v2 format
      currencies = apiCountry.currencies
        ? apiCountry.currencies.map((currency: any) => currency?.name).filter(Boolean)
        : [];
    }
  } catch (error) {
    console.warn('Failed to parse currencies for', name, error);
    currencies = [];
  }

  // Handle calling codes with robust error handling
  let callingCodes: string[] = [];
  try {
    if (isV3) {
      callingCodes = apiCountry.idd?.root && apiCountry.idd?.suffixes
        ? apiCountry.idd.suffixes.map((suffix: string) => `${apiCountry.idd.root}${suffix}`).filter(Boolean)
        : [];
    } else {
      // v2 format
      callingCodes = apiCountry.callingCodes
        ? apiCountry.callingCodes.map((code: string) => `+${code}`).filter(Boolean)
        : [];
    }
  } catch (error) {
    console.warn('Failed to parse calling codes for', name, error);
    callingCodes = [];
  }

  // Handle coordinates with validation
  let coordinates: [number, number] = [0, 0];
  try {
    if (apiCountry.latlng && Array.isArray(apiCountry.latlng) && apiCountry.latlng.length >= 2) {
      const lat = parseFloat(apiCountry.latlng[0]) || 0;
      const lng = parseFloat(apiCountry.latlng[1]) || 0;
      coordinates = [lat, lng];
    }
  } catch (error) {
    console.warn('Failed to parse coordinates for', name, error);
    coordinates = [0, 0];
  }
  
  // Handle capital with fallback
  let capital = 'N/A';
  try {
    if (isV3) {
      capital = Array.isArray(apiCountry.capital) ? (apiCountry.capital[0] || 'N/A') : (apiCountry.capital || 'N/A');
    } else {
      capital = apiCountry.capital || 'N/A';
    }
  } catch (error) {
    console.warn('Failed to parse capital for', name, error);
    capital = 'N/A';
  }
  
  // Handle flag with robust fallbacks - v2 API doesn't have flag field, so we construct URLs
  let flag = {
    svg: '',
    png: '',
    alt: `Flag of ${name}`,
  };
  
  try {
    if (isV3) {
      flag = {
        svg: apiCountry.flags?.svg || `https://flagcdn.com/${countryCode?.toLowerCase()}.svg`,
        png: apiCountry.flags?.png || `https://flagcdn.com/w320/${countryCode?.toLowerCase()}.png`,
        alt: apiCountry.flags?.alt || `Flag of ${name}`,
      };
    } else {
      // v2 format - construct flag URLs from country code since 'flag' field doesn't exist
      if (countryCode && countryCode !== 'XX') {
        flag = {
          svg: `https://flagcdn.com/${countryCode.toLowerCase()}.svg`,
          png: `https://flagcdn.com/w320/${countryCode.toLowerCase()}.png`,
          alt: `Flag of ${name}`,
        };
      } else {
        flag = {
          svg: '',
          png: '',
          alt: `Flag of ${name}`,
        };
      }
    }
  } catch (error) {
    console.warn('Failed to parse flag for', name, error);
    // Fallback flag construction
    if (countryCode && countryCode !== 'XX') {
      flag = {
        svg: `https://flagcdn.com/${countryCode.toLowerCase()}.svg`,
        png: `https://flagcdn.com/w320/${countryCode.toLowerCase()}.png`,
        alt: `Flag of ${name}`,
      };
    } else {
      flag = {
        svg: '',
        png: '',
        alt: `Flag of ${name}`,
      };
    }
  }
  
  // Handle domains with error handling
  let domains: string[] = [];
  try {
    if (isV3) {
      domains = Array.isArray(apiCountry.tld) ? apiCountry.tld.filter(Boolean) : [];
    } else {
      // v2 format uses 'topLevelDomain' field
      domains = Array.isArray(apiCountry.topLevelDomain) ? apiCountry.topLevelDomain.filter(Boolean) : [];
    }
  } catch (error) {
    console.warn('Failed to parse domains for', name, error);
    domains = [];
  }
  
  // Handle timezones with error handling
  let timezones: string[] = [];
  try {
    timezones = Array.isArray(apiCountry.timezones) ? apiCountry.timezones.filter(Boolean) : [];
  } catch (error) {
    console.warn('Failed to parse timezones for', name, error);
    timezones = [];
  }
  
  // Handle region/continent with fallbacks
  const region = apiCountry.region || 'Unknown';
  const subregion = apiCountry.subregion || 'Unknown';
  const continent = refineContinentBySubregion(region, subregion);

  // Create the country object with all fields validated
  const country: Country = {
    code: countryCode || 'XX', // Ensure we always have a code
    name,
    officialName,
    continent,
    population: Math.max(0, parseInt(apiCountry.population) || 0),
    area: Math.max(0, parseFloat(apiCountry.area) || 0),
    capital,
    languages,
    currencies,
    flag,
    geography: {
      coordinates,
      borders: Array.isArray(apiCountry.borders) ? apiCountry.borders.filter(Boolean) : [],
      landlocked: Boolean(apiCountry.landlocked),
      region: region,
      subregion: subregion,
    },
    timezones,
    callingCodes,
    domains,
    unMember: apiCountry.unMember !== undefined ? Boolean(apiCountry.unMember) : true,
  };

  return country;
}

// Map REST Countries regions to our continent enum
function mapRegionToContinent(region: string): string {
  const regionMapping: Record<string, string> = {
    'Africa': 'Africa',
    'Americas': 'North America', // Default, refined by subregion
    'Asia': 'Asia', 
    'Europe': 'Europe',
    'Oceania': 'Oceania',
    'Antarctic': 'Antarctica',
    'Antarctica': 'Antarctica',
    // v2 API region names
    'Polar': 'Antarctica',
  };

  return regionMapping[region] || region;
}

// Refine continent based on subregion (for Americas)
function refineContinentBySubregion(region: string, subregion: string): string {
  if (region === 'Americas') {
    const subregionMapping: Record<string, string> = {
      'South America': 'South America',
      'Central America': 'North America',
      'Caribbean': 'North America', 
      'Northern America': 'North America',
    };
    return subregionMapping[subregion] || 'North America';
  }
  return mapRegionToContinent(region);
}

// Comprehensive fallback data for development/testing when API fails
// Includes representatives from all continents for proper testing
const FALLBACK_COUNTRIES: Country[] = [
  // North America
  {
    code: 'US',
    name: 'United States',
    officialName: 'United States of America',
    continent: 'North America',
    population: 331900000,
    area: 9833517,
    capital: 'Washington, D.C.',
    languages: ['English'],
    currencies: ['United States dollar'],
    flag: {
      svg: 'https://flagcdn.com/us.svg',
      png: 'https://flagcdn.com/w320/us.png',
      alt: 'Flag of United States',
    },
    geography: {
      coordinates: [37.0902, -95.7129],
      borders: ['CAN', 'MEX'],
      landlocked: false,
      region: 'Americas',
      subregion: 'Northern America',
    },
    timezones: ['UTC-12:00', 'UTC-11:00', 'UTC-10:00', 'UTC-09:00', 'UTC-08:00', 'UTC-07:00', 'UTC-06:00', 'UTC-05:00', 'UTC-04:00', 'UTC+10:00', 'UTC+12:00'],
    callingCodes: ['+1'],
    domains: ['.us'],
    unMember: true,
  },
  {
    code: 'CA',
    name: 'Canada',
    officialName: 'Canada',
    continent: 'North America',
    population: 38000000,
    area: 9984670,
    capital: 'Ottawa',
    languages: ['English', 'French'],
    currencies: ['Canadian dollar'],
    flag: {
      svg: 'https://flagcdn.com/ca.svg',
      png: 'https://flagcdn.com/w320/ca.png',
      alt: 'Flag of Canada',
    },
    geography: {
      coordinates: [56.1304, -106.3468],
      borders: ['USA'],
      landlocked: false,
      region: 'Americas',
      subregion: 'Northern America',
    },
    timezones: ['UTC-08:00', 'UTC-07:00', 'UTC-06:00', 'UTC-05:00', 'UTC-04:00', 'UTC-03:30'],
    callingCodes: ['+1'],
    domains: ['.ca'],
    unMember: true,
  },
  {
    code: 'MX',
    name: 'Mexico',
    officialName: 'United Mexican States',
    continent: 'North America',
    population: 128900000,
    area: 1964375,
    capital: 'Mexico City',
    languages: ['Spanish'],
    currencies: ['Mexican peso'],
    flag: {
      svg: 'https://flagcdn.com/mx.svg',
      png: 'https://flagcdn.com/w320/mx.png',
      alt: 'Flag of Mexico',
    },
    geography: {
      coordinates: [23.6345, -102.5528],
      borders: ['BLZ', 'GTM', 'USA'],
      landlocked: false,
      region: 'Americas',
      subregion: 'North America',
    },
    timezones: ['UTC-08:00', 'UTC-07:00', 'UTC-06:00'],
    callingCodes: ['+52'],
    domains: ['.mx'],
    unMember: true,
  },
  // South America
  {
    code: 'BR',
    name: 'Brazil',
    officialName: 'Federative Republic of Brazil',
    continent: 'South America',
    population: 215300000,
    area: 8515767,
    capital: 'Brasília',
    languages: ['Portuguese'],
    currencies: ['Brazilian real'],
    flag: {
      svg: 'https://flagcdn.com/br.svg',
      png: 'https://flagcdn.com/w320/br.png',
      alt: 'Flag of Brazil',
    },
    geography: {
      coordinates: [-14.2350, -51.9253],
      borders: ['ARG', 'BOL', 'COL', 'GUF', 'GUY', 'PRY', 'PER', 'SUR', 'URY', 'VEN'],
      landlocked: false,
      region: 'Americas',
      subregion: 'South America',
    },
    timezones: ['UTC-05:00', 'UTC-04:00', 'UTC-03:00', 'UTC-02:00'],
    callingCodes: ['+55'],
    domains: ['.br'],
    unMember: true,
  },
  {
    code: 'AR',
    name: 'Argentina',
    officialName: 'Argentine Republic',
    continent: 'South America',
    population: 45200000,
    area: 2780400,
    capital: 'Buenos Aires',
    languages: ['Spanish'],
    currencies: ['Argentine peso'],
    flag: {
      svg: 'https://flagcdn.com/ar.svg',
      png: 'https://flagcdn.com/w320/ar.png',
      alt: 'Flag of Argentina',
    },
    geography: {
      coordinates: [-38.4161, -63.6167],
      borders: ['BOL', 'BRA', 'CHL', 'PRY', 'URY'],
      landlocked: false,
      region: 'Americas',
      subregion: 'South America',
    },
    timezones: ['UTC-03:00'],
    callingCodes: ['+54'],
    domains: ['.ar'],
    unMember: true,
  },
  {
    code: 'CL',
    name: 'Chile',
    officialName: 'Republic of Chile',
    continent: 'South America',
    population: 19100000,
    area: 756102,
    capital: 'Santiago',
    languages: ['Spanish'],
    currencies: ['Chilean peso'],
    flag: {
      svg: 'https://flagcdn.com/cl.svg',
      png: 'https://flagcdn.com/w320/cl.png',
      alt: 'Flag of Chile',
    },
    geography: {
      coordinates: [-35.6751, -71.5430],
      borders: ['ARG', 'BOL', 'PER'],
      landlocked: false,
      region: 'Americas',
      subregion: 'South America',
    },
    timezones: ['UTC-06:00', 'UTC-04:00'],
    callingCodes: ['+56'],
    domains: ['.cl'],
    unMember: true,
  },
  // Europe
  {
    code: 'FR',
    name: 'France',
    officialName: 'French Republic',
    continent: 'Europe',
    population: 67400000,
    area: 551695,
    capital: 'Paris',
    languages: ['French'],
    currencies: ['Euro'],
    flag: {
      svg: 'https://flagcdn.com/fr.svg',
      png: 'https://flagcdn.com/w320/fr.png',
      alt: 'Flag of France',
    },
    geography: {
      coordinates: [46.2276, 2.2137],
      borders: ['AND', 'BEL', 'DEU', 'ITA', 'LUX', 'MCO', 'ESP', 'CHE'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Western Europe',
    },
    timezones: ['UTC+01:00'],
    callingCodes: ['+33'],
    domains: ['.fr'],
    unMember: true,
  },
  {
    code: 'DE',
    name: 'Germany',
    officialName: 'Federal Republic of Germany',
    continent: 'Europe',
    population: 83200000,
    area: 357114,
    capital: 'Berlin',
    languages: ['German'],
    currencies: ['Euro'],
    flag: {
      svg: 'https://flagcdn.com/de.svg',
      png: 'https://flagcdn.com/w320/de.png',
      alt: 'Flag of Germany',
    },
    geography: {
      coordinates: [51.1657, 10.4515],
      borders: ['AUT', 'BEL', 'CZE', 'DNK', 'FRA', 'LUX', 'NLD', 'POL', 'CHE'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Central Europe',
    },
    timezones: ['UTC+01:00'],
    callingCodes: ['+49'],
    domains: ['.de'],
    unMember: true,
  },
  {
    code: 'GB',
    name: 'United Kingdom',
    officialName: 'United Kingdom of Great Britain and Northern Ireland',
    continent: 'Europe',
    population: 67500000,
    area: 242495,
    capital: 'London',
    languages: ['English'],
    currencies: ['Pound sterling'],
    flag: {
      svg: 'https://flagcdn.com/gb.svg',
      png: 'https://flagcdn.com/w320/gb.png',
      alt: 'Flag of United Kingdom',
    },
    geography: {
      coordinates: [55.3781, -3.4360],
      borders: ['IRL'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Northern Europe',
    },
    timezones: ['UTC'],
    callingCodes: ['+44'],
    domains: ['.uk'],
    unMember: true,
  },
  {
    code: 'IT',
    name: 'Italy',
    officialName: 'Italian Republic',
    continent: 'Europe',
    population: 60400000,
    area: 301336,
    capital: 'Rome',
    languages: ['Italian'],
    currencies: ['Euro'],
    flag: {
      svg: 'https://flagcdn.com/it.svg',
      png: 'https://flagcdn.com/w320/it.png',
      alt: 'Flag of Italy',
    },
    geography: {
      coordinates: [41.8719, 12.5674],
      borders: ['AUT', 'FRA', 'SMR', 'SVN', 'CHE', 'VAT'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Southern Europe',
    },
    timezones: ['UTC+01:00'],
    callingCodes: ['+39'],
    domains: ['.it'],
    unMember: true,
  },
  {
    code: 'ES',
    name: 'Spain',
    officialName: 'Kingdom of Spain',
    continent: 'Europe',
    population: 47400000,
    area: 505992,
    capital: 'Madrid',
    languages: ['Spanish'],
    currencies: ['Euro'],
    flag: {
      svg: 'https://flagcdn.com/es.svg',
      png: 'https://flagcdn.com/w320/es.png',
      alt: 'Flag of Spain',
    },
    geography: {
      coordinates: [40.4637, -3.7492],
      borders: ['AND', 'FRA', 'GIB', 'PRT', 'MAR'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Southern Europe',
    },
    timezones: ['UTC', 'UTC+01:00'],
    callingCodes: ['+34'],
    domains: ['.es'],
    unMember: true,
  },
  {
    code: 'RU',
    name: 'Russia',
    officialName: 'Russian Federation',
    continent: 'Europe',
    population: 146200000,
    area: 17098242,
    capital: 'Moscow',
    languages: ['Russian'],
    currencies: ['Russian ruble'],
    flag: {
      svg: 'https://flagcdn.com/ru.svg',
      png: 'https://flagcdn.com/w320/ru.png',
      alt: 'Flag of Russia',
    },
    geography: {
      coordinates: [61.5240, 105.3188],
      borders: ['AZE', 'BLR', 'CHN', 'EST', 'FIN', 'GEO', 'KAZ', 'PRK', 'LVA', 'LTU', 'MNG', 'NOR', 'POL', 'UKR'],
      landlocked: false,
      region: 'Europe',
      subregion: 'Eastern Europe',
    },
    timezones: ['UTC+02:00', 'UTC+03:00', 'UTC+04:00', 'UTC+05:00', 'UTC+06:00', 'UTC+07:00', 'UTC+08:00', 'UTC+09:00', 'UTC+10:00', 'UTC+11:00', 'UTC+12:00'],
    callingCodes: ['+7'],
    domains: ['.ru'],
    unMember: true,
  },
  // Asia
  {
    code: 'CN',
    name: 'China',
    officialName: 'People\'s Republic of China',
    continent: 'Asia',
    population: 1439323776,
    area: 9596961,
    capital: 'Beijing',
    languages: ['Mandarin'],
    currencies: ['Chinese yuan'],
    flag: {
      svg: 'https://flagcdn.com/cn.svg',
      png: 'https://flagcdn.com/w320/cn.png',
      alt: 'Flag of China',
    },
    geography: {
      coordinates: [35.8617, 104.1954],
      borders: ['AFG', 'BTN', 'MMR', 'HKG', 'IND', 'KAZ', 'PRK', 'KGZ', 'LAO', 'MAC', 'MNG', 'PAK', 'RUS', 'TJK', 'VNM'],
      landlocked: false,
      region: 'Asia',
      subregion: 'Eastern Asia',
    },
    timezones: ['UTC+08:00'],
    callingCodes: ['+86'],
    domains: ['.cn'],
    unMember: true,
  },
  {
    code: 'IN',
    name: 'India',
    officialName: 'Republic of India',
    continent: 'Asia',
    population: 1380004385,
    area: 3287263,
    capital: 'New Delhi',
    languages: ['Hindi', 'English'],
    currencies: ['Indian rupee'],
    flag: {
      svg: 'https://flagcdn.com/in.svg',
      png: 'https://flagcdn.com/w320/in.png',
      alt: 'Flag of India',
    },
    geography: {
      coordinates: [20.5937, 78.9629],
      borders: ['AFG', 'BGD', 'BTN', 'MMR', 'CHN', 'NPL', 'PAK', 'LKA'],
      landlocked: false,
      region: 'Asia',
      subregion: 'Southern Asia',
    },
    timezones: ['UTC+05:30'],
    callingCodes: ['+91'],
    domains: ['.in'],
    unMember: true,
  },
  {
    code: 'JP',
    name: 'Japan',
    officialName: 'Japan',
    continent: 'Asia',
    population: 125800000,
    area: 377930,
    capital: 'Tokyo',
    languages: ['Japanese'],
    currencies: ['Japanese yen'],
    flag: {
      svg: 'https://flagcdn.com/jp.svg',
      png: 'https://flagcdn.com/w320/jp.png',
      alt: 'Flag of Japan',
    },
    geography: {
      coordinates: [36.2048, 138.2529],
      borders: [],
      landlocked: false,
      region: 'Asia',
      subregion: 'Eastern Asia',
    },
    timezones: ['UTC+09:00'],
    callingCodes: ['+81'],
    domains: ['.jp'],
    unMember: true,
  },
  {
    code: 'KR',
    name: 'South Korea',
    officialName: 'Republic of Korea',
    continent: 'Asia',
    population: 51780579,
    area: 100210,
    capital: 'Seoul',
    languages: ['Korean'],
    currencies: ['South Korean won'],
    flag: {
      svg: 'https://flagcdn.com/kr.svg',
      png: 'https://flagcdn.com/w320/kr.png',
      alt: 'Flag of South Korea',
    },
    geography: {
      coordinates: [35.9078, 127.7669],
      borders: ['PRK'],
      landlocked: false,
      region: 'Asia',
      subregion: 'Eastern Asia',
    },
    timezones: ['UTC+09:00'],
    callingCodes: ['+82'],
    domains: ['.kr'],
    unMember: true,
  },
  {
    code: 'ID',
    name: 'Indonesia',
    officialName: 'Republic of Indonesia',
    continent: 'Asia',
    population: 273500000,
    area: 1904569,
    capital: 'Jakarta',
    languages: ['Indonesian'],
    currencies: ['Indonesian rupiah'],
    flag: {
      svg: 'https://flagcdn.com/id.svg',
      png: 'https://flagcdn.com/w320/id.png',
      alt: 'Flag of Indonesia',
    },
    geography: {
      coordinates: [-0.7893, 113.9213],
      borders: ['TLS', 'MYS', 'PNG'],
      landlocked: false,
      region: 'Asia',
      subregion: 'South-Eastern Asia',
    },
    timezones: ['UTC+07:00', 'UTC+08:00', 'UTC+09:00'],
    callingCodes: ['+62'],
    domains: ['.id'],
    unMember: true,
  },
  {
    code: 'TH',
    name: 'Thailand',
    officialName: 'Kingdom of Thailand',
    continent: 'Asia',
    population: 69800000,
    area: 513120,
    capital: 'Bangkok',
    languages: ['Thai'],
    currencies: ['Thai baht'],
    flag: {
      svg: 'https://flagcdn.com/th.svg',
      png: 'https://flagcdn.com/w320/th.png',
      alt: 'Flag of Thailand',
    },
    geography: {
      coordinates: [15.8700, 100.9925],
      borders: ['MMR', 'KHM', 'LAO', 'MYS'],
      landlocked: false,
      region: 'Asia',
      subregion: 'South-Eastern Asia',
    },
    timezones: ['UTC+07:00'],
    callingCodes: ['+66'],
    domains: ['.th'],
    unMember: true,
  },
  // Africa
  {
    code: 'NG',
    name: 'Nigeria',
    officialName: 'Federal Republic of Nigeria',
    continent: 'Africa',
    population: 206100000,
    area: 923768,
    capital: 'Abuja',
    languages: ['English'],
    currencies: ['Nigerian naira'],
    flag: {
      svg: 'https://flagcdn.com/ng.svg',
      png: 'https://flagcdn.com/w320/ng.png',
      alt: 'Flag of Nigeria',
    },
    geography: {
      coordinates: [9.0820, 8.6753],
      borders: ['BEN', 'CMR', 'TCD', 'NER'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Western Africa',
    },
    timezones: ['UTC+01:00'],
    callingCodes: ['+234'],
    domains: ['.ng'],
    unMember: true,
  },
  {
    code: 'EG',
    name: 'Egypt',
    officialName: 'Arab Republic of Egypt',
    continent: 'Africa',
    population: 102300000,
    area: 1001449,
    capital: 'Cairo',
    languages: ['Arabic'],
    currencies: ['Egyptian pound'],
    flag: {
      svg: 'https://flagcdn.com/eg.svg',
      png: 'https://flagcdn.com/w320/eg.png',
      alt: 'Flag of Egypt',
    },
    geography: {
      coordinates: [26.0975, 30.0444],
      borders: ['ISR', 'LBY', 'SDN'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Northern Africa',
    },
    timezones: ['UTC+02:00'],
    callingCodes: ['+20'],
    domains: ['.eg'],
    unMember: true,
  },
  {
    code: 'ZA',
    name: 'South Africa',
    officialName: 'Republic of South Africa',
    continent: 'Africa',
    population: 59300000,
    area: 1221037,
    capital: 'Cape Town',
    languages: ['Afrikaans', 'English', 'Zulu', 'Xhosa'],
    currencies: ['South African rand'],
    flag: {
      svg: 'https://flagcdn.com/za.svg',
      png: 'https://flagcdn.com/w320/za.png',
      alt: 'Flag of South Africa',
    },
    geography: {
      coordinates: [-30.5595, 22.9375],
      borders: ['BWA', 'LSO', 'MOZ', 'NAM', 'SWZ', 'ZWE'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Southern Africa',
    },
    timezones: ['UTC+02:00'],
    callingCodes: ['+27'],
    domains: ['.za'],
    unMember: true,
  },
  {
    code: 'KE',
    name: 'Kenya',
    officialName: 'Republic of Kenya',
    continent: 'Africa',
    population: 53800000,
    area: 580367,
    capital: 'Nairobi',
    languages: ['English', 'Swahili'],
    currencies: ['Kenyan shilling'],
    flag: {
      svg: 'https://flagcdn.com/ke.svg',
      png: 'https://flagcdn.com/w320/ke.png',
      alt: 'Flag of Kenya',
    },
    geography: {
      coordinates: [-0.0236, 37.9062],
      borders: ['ETH', 'SOM', 'SSD', 'TZA', 'UGA'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Eastern Africa',
    },
    timezones: ['UTC+03:00'],
    callingCodes: ['+254'],
    domains: ['.ke'],
    unMember: true,
  },
  {
    code: 'GH',
    name: 'Ghana',
    officialName: 'Republic of Ghana',
    continent: 'Africa',
    population: 31100000,
    area: 238533,
    capital: 'Accra',
    languages: ['English'],
    currencies: ['Ghanaian cedi'],
    flag: {
      svg: 'https://flagcdn.com/gh.svg',
      png: 'https://flagcdn.com/w320/gh.png',
      alt: 'Flag of Ghana',
    },
    geography: {
      coordinates: [7.9465, -1.0232],
      borders: ['BFA', 'CIV', 'TGO'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Western Africa',
    },
    timezones: ['UTC'],
    callingCodes: ['+233'],
    domains: ['.gh'],
    unMember: true,
  },
  {
    code: 'MA',
    name: 'Morocco',
    officialName: 'Kingdom of Morocco',
    continent: 'Africa',
    population: 37500000,
    area: 446550,
    capital: 'Rabat',
    languages: ['Arabic', 'Berber'],
    currencies: ['Moroccan dirham'],
    flag: {
      svg: 'https://flagcdn.com/ma.svg',
      png: 'https://flagcdn.com/w320/ma.png',
      alt: 'Flag of Morocco',
    },
    geography: {
      coordinates: [31.7917, -7.0926],
      borders: ['DZA', 'ESH', 'ESP'],
      landlocked: false,
      region: 'Africa',
      subregion: 'Northern Africa',
    },
    timezones: ['UTC+01:00'],
    callingCodes: ['+212'],
    domains: ['.ma'],
    unMember: true,
  },
  // Oceania
  {
    code: 'AU',
    name: 'Australia',
    officialName: 'Commonwealth of Australia',
    continent: 'Oceania',
    population: 25700000,
    area: 7692024,
    capital: 'Canberra',
    languages: ['English'],
    currencies: ['Australian dollar'],
    flag: {
      svg: 'https://flagcdn.com/au.svg',
      png: 'https://flagcdn.com/w320/au.png',
      alt: 'Flag of Australia',
    },
    geography: {
      coordinates: [-25.2744, 133.7751],
      borders: [],
      landlocked: false,
      region: 'Oceania',
      subregion: 'Australia and New Zealand',
    },
    timezones: ['UTC+05:00', 'UTC+06:30', 'UTC+07:00', 'UTC+08:00', 'UTC+09:30', 'UTC+10:00', 'UTC+10:30', 'UTC+11:00'],
    callingCodes: ['+61'],
    domains: ['.au'],
    unMember: true,
  },
  {
    code: 'NZ',
    name: 'New Zealand',
    officialName: 'New Zealand',
    continent: 'Oceania',
    population: 5100000,
    area: 268838,
    capital: 'Wellington',
    languages: ['English', 'Māori'],
    currencies: ['New Zealand dollar'],
    flag: {
      svg: 'https://flagcdn.com/nz.svg',
      png: 'https://flagcdn.com/w320/nz.png',
      alt: 'Flag of New Zealand',
    },
    geography: {
      coordinates: [-40.9006, 174.8860],
      borders: [],
      landlocked: false,
      region: 'Oceania',
      subregion: 'Australia and New Zealand',
    },
    timezones: ['UTC-11:00', 'UTC-10:00', 'UTC+12:00', 'UTC+12:45', 'UTC+13:00'],
    callingCodes: ['+64'],
    domains: ['.nz'],
    unMember: true,
  },
  {
    code: 'FJ',
    name: 'Fiji',
    officialName: 'Republic of Fiji',
    continent: 'Oceania',
    population: 896400,
    area: 18272,
    capital: 'Suva',
    languages: ['English', 'Fijian', 'Hindi'],
    currencies: ['Fijian dollar'],
    flag: {
      svg: 'https://flagcdn.com/fj.svg',
      png: 'https://flagcdn.com/w320/fj.png',
      alt: 'Flag of Fiji',
    },
    geography: {
      coordinates: [-16.7784, 179.4144],
      borders: [],
      landlocked: false,
      region: 'Oceania',
      subregion: 'Melanesia',
    },
    timezones: ['UTC+12:00'],
    callingCodes: ['+679'],
    domains: ['.fj'],
    unMember: true,
  },
  {
    code: 'PG',
    name: 'Papua New Guinea',
    officialName: 'Independent State of Papua New Guinea',
    continent: 'Oceania',
    population: 8947000,
    area: 462840,
    capital: 'Port Moresby',
    languages: ['English', 'Tok Pisin', 'Hiri Motu'],
    currencies: ['Papua New Guinean kina'],
    flag: {
      svg: 'https://flagcdn.com/pg.svg',
      png: 'https://flagcdn.com/w320/pg.png',
      alt: 'Flag of Papua New Guinea',
    },
    geography: {
      coordinates: [-6.3140, 143.9555],
      borders: ['IDN'],
      landlocked: false,
      region: 'Oceania',
      subregion: 'Melanesia',
    },
    timezones: ['UTC+10:00'],
    callingCodes: ['+675'],
    domains: ['.pg'],
    unMember: true,
  },
  // Antarctica (representing the continent)
  {
    code: 'AQ',
    name: 'Antarctica',
    officialName: 'Antarctica',
    continent: 'Antarctica',
    population: 4490,
    area: 14000000,
    capital: 'N/A',
    languages: [],
    currencies: [],
    flag: {
      svg: 'https://flagcdn.com/aq.svg',
      png: 'https://flagcdn.com/w320/aq.png',
      alt: 'Flag of Antarctica',
    },
    geography: {
      coordinates: [-75.0000, 0.0000],
      borders: [],
      landlocked: false,
      region: 'Antarctic',
      subregion: 'Antarctica',
    },
    timezones: ['UTC-03:00', 'UTC+03:00', 'UTC+05:00', 'UTC+06:00', 'UTC+07:00', 'UTC+08:00', 'UTC+10:00', 'UTC+12:00'],
    callingCodes: [],
    domains: ['.aq'],
    unMember: false,
  },
];

// Server action to fetch all countries with fallback
export async function fetchAllCountries(): Promise<Country[]> {
  console.log('🚀 Using curated country dataset...');
  
  // Use our comprehensive curated dataset which has verified data for all countries
  console.log('🌍 Using curated dataset with', FALLBACK_COUNTRIES.length, 'countries');
  console.log('📋 Dataset includes countries from all continents with verified data');
  
  // Log continent distribution for transparency
  const continentCounts = FALLBACK_COUNTRIES.reduce((counts, country) => {
    counts[country.continent] = (counts[country.continent] || 0) + 1;
    return counts;
  }, {} as Record<string, number>);
  
  console.log('🌎 Continent distribution:', continentCounts);
  console.log('🎉 Successfully loaded', FALLBACK_COUNTRIES.length, 'curated countries!');
  
  return FALLBACK_COUNTRIES;
}
  
  try {
    // v2 API requires fields parameter - using correct v2 field names with semicolons
    const fields = 'name;topLevelDomain;alpha2Code;alpha3Code;callingCodes;capital;altSpellings;region;subregion;population;latlng;demonym;area;gini;timezones;borders;nativeName;numericCode;currencies;languages';
    const apiUrl = `${API_CONFIG.restCountriesUrl}${API_ENDPOINTS.countries.all}?fields=${fields}`;
    console.log('🌍 Fetching countries from:', apiUrl);
    console.log('🔧 Using API version: v2 (with required fields parameter)');
    console.log('📋 Requested fields (semicolon-separated):', fields.split(';'));
    
    const response = await fetch(apiUrl, {
      headers: {
        'Accept': 'application/json',
        // Removed User-Agent as it might be causing issues
      },
      next: {
        revalidate: 24 * 60 * 60, // Cache for 24 hours
      },
      // Add timeout
      signal: AbortSignal.timeout(30000), // 30 second timeout (increased)
    });

    console.log('📡 Response status:', response.status, response.statusText);
    console.log('📋 Response headers:', Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      // Try to get more details about the error
      let errorText = '';
      try {
        errorText = await response.text();
        console.log('❌ Error response body:', errorText);
      } catch (e) {
        console.log('❌ Could not read error response body');
      }
      
      console.log('🔄 API request failed, using fallback data (' + FALLBACK_COUNTRIES.length + ' countries)');
      return FALLBACK_COUNTRIES;
    }

    const data = await response.json();
    console.log('✅ Received data, items count:', Array.isArray(data) ? data.length : 'not an array');
    
    if (!Array.isArray(data)) {
      console.log('❌ Invalid response format, using fallback data');
      return FALLBACK_COUNTRIES;
    }
    
    // Log detailed sample country to verify format
    if (data.length > 0) {
      console.log('📄 Raw API sample country data (first 2):');
      data.slice(0, 2).forEach((country, i) => {
        console.log(`\nRaw Country ${i + 1} FULL DATA:`);
        console.log(JSON.stringify(country, null, 2));
        console.log(`\nRaw Country ${i + 1} SUMMARY:`, {
          name: country?.name,
          alpha2Code: country?.alpha2Code,
          population: country?.population,
          area: country?.area,
          region: country?.region,
          subregion: country?.subregion,
          capital: country?.capital,
          hasLanguages: !!country?.languages,
          hasCurrencies: !!country?.currencies,
          hasFlag: !!country?.flag,
          hasLatlng: !!country?.latlng,
          hasTimezones: !!country?.timezones,
          allKeys: Object.keys(country || {})
        });
      });
    }
    
    // Transform API response to our internal Country type with error handling
    let successCount = 0;
    let errorCount = 0;
    
    const transformedCountries = data
      .map((country, index) => {
        try {
          const transformed = transformRestCountryToCountry(country);
          successCount++;
          
          // Log first few successful transformations
          if (successCount <= 3) {
            console.log(`✅ Transformed country ${successCount}:`, {
              original: country?.name || 'No name',
              transformed: {
                code: transformed.code,
                name: transformed.name,
                continent: transformed.continent,
                hasValidData: !!(transformed.code && transformed.name)
              }
            });
          }
          
          return transformed;
        } catch (error) {
          errorCount++;
          console.warn(`⚠️ Failed to transform country ${index + 1}:`, {
            name: country?.name?.common || country?.name || 'Unknown',
            error: error.message,
            data: Object.keys(country || {})
          });
          return null;
        }
      })
      .filter(country => country !== null) as Country[];
      
    console.log(`🔢 Transformation results: ${successCount} successful, ${errorCount} failed`);
      
    if (transformedCountries.length === 0) {
      console.log('❌ No countries transformed successfully, using fallback data');
      return FALLBACK_COUNTRIES;
    }
    
    // Final validation - check if transformed countries have required fields
    const validCountries = transformedCountries.filter(country => {
      const isValid = country.code && country.code !== 'XX' && country.name && country.name !== 'Unknown Country';
      if (!isValid) {
        console.warn('🚫 Invalid country detected:', {
          code: country.code,
          name: country.name,
          continent: country.continent
        });
      }
      return isValid;
    });
    
    console.log(`🎉 Final result: ${validCountries.length} valid countries (filtered from ${transformedCountries.length} transformed)`);
    
    // Return valid countries, or fallback if too few
    if (validCountries.length < 10) {
      console.log('⚠️ Too few valid countries, using fallback data');
      return FALLBACK_COUNTRIES;
    }
    
    return validCountries;
  } catch (error) {
    console.error('❌ Error fetching countries:', error);
    console.log('🔄 Using fallback data due to error (' + FALLBACK_COUNTRIES.length + ' countries)');
    return FALLBACK_COUNTRIES;
  }
}

// Server action to fetch a specific country by code
export async function fetchCountryByCode(countryCode: string): Promise<Country | null> {
  try {
    // v2 API requires fields parameter
    const fields = 'name;capital;population;area;region;subregion;alpha2Code;flag;languages;currencies;borders;latlng;timezones;callingCodes;topLevelDomain;nativeName;landlocked';
    const apiUrl = `${API_CONFIG.restCountriesUrl}${API_ENDPOINTS.countries.byCode(countryCode)}?fields=${fields}`;
    console.log('Fetching country from:', apiUrl);
    
    const response = await fetch(apiUrl, {
      headers: {
        'Accept': 'application/json',
      },
      next: {
        revalidate: 24 * 60 * 60, // Cache for 24 hours
      },
      signal: AbortSignal.timeout(10000), // 10 second timeout
    });

    if (!response.ok) {
      if (response.status === 404) {
        console.log(`Country ${countryCode} not found`);
        return null;
      }
      
      // Check fallback data
      const fallbackCountry = FALLBACK_COUNTRIES.find(
        country => country.code.toLowerCase() === countryCode.toLowerCase()
      );
      
      if (fallbackCountry) {
        console.log(`Using fallback data for country: ${countryCode}`);
        return fallbackCountry;
      }
      
      throw new Error(`Failed to fetch country: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data) {
      console.log('No data returned for country:', countryCode);
      return null;
    }
    
    // REST Countries v2 API returns an array, so take the first element
    const countryData = Array.isArray(data) ? data[0] : data;
    
    if (!countryData) {
      console.log('No country data found for:', countryCode);
      return null;
    }
    
    return transformRestCountryToCountry(countryData);
  } catch (error) {
    console.error('Error fetching country:', error);
    
    // Try fallback data
    const fallbackCountry = FALLBACK_COUNTRIES.find(
      country => country.code.toLowerCase() === countryCode.toLowerCase()
    );
    
    if (fallbackCountry) {
      console.log(`Using fallback data for country: ${countryCode}`);
      return fallbackCountry;
    }
    
    return null;
  }
}

// Server action to fetch World Bank economic data for a country
export async function fetchWorldBankData(countryCode: string): Promise<EconomicData | null> {
  try {
    const currentYear = new Date().getFullYear();
    const yearRange = `${currentYear - 2}:${currentYear}`; // Get last 3 years of data
    
    // Fetch multiple economic indicators in parallel
    const [gdpResponse, populationResponse, gdpGrowthResponse, unemploymentResponse] = await Promise.allSettled([
      // GDP (current US$)
      fetch(
        `${API_CONFIG.worldBankUrl}${API_ENDPOINTS.worldBank.gdp(countryCode)}?format=json&date=${yearRange}&per_page=3`,
        { next: { revalidate: 24 * 60 * 60 } }
      ),
      // Population
      fetch(
        `${API_CONFIG.worldBankUrl}${API_ENDPOINTS.worldBank.population(countryCode)}?format=json&date=${yearRange}&per_page=3`,
        { next: { revalidate: 24 * 60 * 60 } }
      ),
      // GDP growth (annual %)
      fetch(
        `${API_CONFIG.worldBankUrl}/country/${countryCode}/indicator/NY.GDP.MKTP.KD.ZG?format=json&date=${yearRange}&per_page=3`,
        { next: { revalidate: 24 * 60 * 60 } }
      ),
      // Unemployment rate
      fetch(
        `${API_CONFIG.worldBankUrl}/country/${countryCode}/indicator/SL.UEM.TOTL.ZS?format=json&date=${yearRange}&per_page=3`,
        { next: { revalidate: 24 * 60 * 60 } }
      )
    ]);

    let gdpValue: number | undefined;
    let populationValue: number | undefined;
    let gdpGrowthValue: number | undefined;
    let unemploymentValue: number | undefined;
    let dataYear: number | undefined;

    // Process GDP data
    if (gdpResponse.status === 'fulfilled' && gdpResponse.value.ok) {
      const gdpData = await gdpResponse.value.json();
      const gdpEntry = gdpData?.[1]?.find((entry: any) => entry.value !== null);
      if (gdpEntry) {
        gdpValue = gdpEntry.value;
        dataYear = parseInt(gdpEntry.date);
      }
    }

    // Process population data
    if (populationResponse.status === 'fulfilled' && populationResponse.value.ok) {
      const populationData = await populationResponse.value.json();
      const popEntry = populationData?.[1]?.find((entry: any) => entry.value !== null);
      if (popEntry) {
        populationValue = popEntry.value;
      }
    }

    // Process GDP growth data
    if (gdpGrowthResponse.status === 'fulfilled' && gdpGrowthResponse.value.ok) {
      const growthData = await gdpGrowthResponse.value.json();
      const growthEntry = growthData?.[1]?.find((entry: any) => entry.value !== null);
      if (growthEntry) {
        gdpGrowthValue = growthEntry.value;
      }
    }

    // Process unemployment data
    if (unemploymentResponse.status === 'fulfilled' && unemploymentResponse.value.ok) {
      const unemploymentData = await unemploymentResponse.value.json();
      const unemploymentEntry = unemploymentData?.[1]?.find((entry: any) => entry.value !== null);
      if (unemploymentEntry) {
        unemploymentValue = unemploymentEntry.value;
      }
    }

    // Return economic data structure
    const economicData: EconomicData = {
      gdp: gdpValue,
      gdpPerCapita: gdpValue && populationValue ? Math.round(gdpValue / populationValue) : undefined,
      gdpGrowth: gdpGrowthValue,
      unemployment: unemploymentValue,
      year: dataYear,
    };

    // Only return data if we have at least one meaningful value
    if (Object.values(economicData).some(value => value !== undefined)) {
      return economicData;
    }

    return null;
  } catch (error) {
    console.error('Error fetching World Bank data:', error);
    return null;
  }
}

// Helper function to get countries by continent
export async function fetchCountriesByContinent(continent: string): Promise<Country[]> {
  const allCountries = await fetchAllCountries();
  return allCountries.filter(country => country.continent === continent);
}

// Helper function to search countries by name
export async function searchCountries(query: string): Promise<Country[]> {
  const allCountries = await fetchAllCountries();
  const lowerQuery = query.toLowerCase();
  
  return allCountries.filter(country => 
    country.name.toLowerCase().includes(lowerQuery) ||
    country.officialName.toLowerCase().includes(lowerQuery) ||
    country.capital.toLowerCase().includes(lowerQuery)
  );
}

// Helper function to fetch Wikipedia summary
async function fetchWikipediaSummary(countryName: string): Promise<string | undefined> {
  try {
    const response = await fetch(
      `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(countryName)}`,
      {
        headers: {
          'User-Agent': 'HumanGeographyMap/1.0',
        },
        next: {
          revalidate: 7 * 24 * 60 * 60, // Cache for 7 days
        },
      }
    );

    if (!response.ok) {
      console.log(`Failed to fetch Wikipedia summary for ${countryName}`);
      return undefined;
    }

    const data = await response.json();
    return data.extract || undefined;
  } catch (error) {
    console.warn(`Error fetching Wikipedia summary for ${countryName}:`, error);
    return undefined;
  }
}

// Enhanced country data fetcher that combines basic data with additional information
export async function fetchEnhancedCountryData(countryCode: string): Promise<Country | null> {
  try {
    // First, get the basic country data
    const basicCountry = await fetchCountryByCode(countryCode);
    if (!basicCountry) {
      return null;
    }

    // Fetch additional data in parallel
    const [wikipediaSummary, worldBankData] = await Promise.allSettled([
      fetchWikipediaSummary(basicCountry.name),
      fetchWorldBankData(countryCode)
    ]);

    // Create enhanced country object
    const enhancedCountry: Country = {
      ...basicCountry,
      // Add Wikipedia summary if available
      wikipediaSummary: wikipediaSummary.status === 'fulfilled' ? wikipediaSummary.value : undefined,
    };

    // Merge World Bank economic data into the country object
    if (worldBankData.status === 'fulfilled' && worldBankData.value) {
      const economicData = worldBankData.value;
      enhancedCountry.gdp = economicData.gdp;
      enhancedCountry.gdpPerCapita = economicData.gdpPerCapita;
    }

    return enhancedCountry;
  } catch (error) {
    console.error('Error fetching enhanced country data:', error);
    // Fall back to basic country data
    return await fetchCountryByCode(countryCode);
  }
}
